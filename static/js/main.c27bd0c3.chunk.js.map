{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","weatherData","setWeatherData","plz","setPlz","search","setSearch","errorMessage","setErrorMessage","useEffect","axios","get","then","response","data","catch","err","message","correctPlzLength","toString","length","className","css","padding","textAlign","background","color","fontSize","Header","onSubmit","e","preventDefault","type","value","onChange","ev","parseInt","target","placeholder","name","Math","round","main","temp","pressure","humidity","timeStampToLocalTime","sys","sunrise","sunset","timeStamp","Date","toLocaleTimeString","timeStyle","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOA+GeA,MA3Gf,WAAgB,IAAD,EACyBC,qBADzB,mBACNC,EADM,KACOC,EADP,OAESF,mBAAS,MAFlB,mBAENG,EAFM,KAEDC,EAFC,OAGeJ,oBAAS,GAHxB,mBAGNK,EAHM,KAGEC,EAHF,OAI2BN,qBAJ3B,mBAINO,EAJM,KAIQC,EAJR,KAMbC,qBAAU,WACRC,IACGC,IADH,8DAE2DR,EAF3D,4DAIGS,MAAK,SAACC,GACLX,EAAeW,EAASC,SAEzBC,OAAM,SAACC,GACNR,EAAgBQ,EAAIC,cAEvB,CAACZ,IAEJ,IAAMa,EAA6C,IAA1Bf,EAAIgB,WAAWC,OAExC,OAAQb,EAsEN,mCACE,qBACEc,UAAWC,YAAI,CACbC,QAAS,OACTC,UAAW,SACXC,WAAY,UACZC,MAAO,QACPC,SAAU,SANd,SASE,yCAAYpB,SA/EhB,sBACEc,UAAWC,YAAI,CACbE,UAAW,SACXE,MAAO,QACPC,SAAU,SAJd,UAOE,cAACC,EAAD,IACA,qBACEP,UAAWC,YAAI,CACbC,QAAS,OACTE,WAAY,YAHhB,SAME,uBACEI,SAAU,SAACC,GACTA,EAAEC,iBACFzB,GAAWD,IAHf,UAME,kFACA,uBACE2B,KAAK,SACLC,MAAO9B,EACP+B,SAAU,SAACC,GACT/B,EAAOgC,SAASD,EAAGE,OAAOJ,MAAO,MAEnCK,YAAY,iBAEbpB,EACC,wBAAQc,KAAK,SAAb,oBAEA,mBACEX,UAAWC,YAAI,CACbK,SAAU,OACVD,MAAO,YAHX,wDAWN,qBACEL,UAAWC,YAAI,CACbC,QAAS,OACTE,WAAY,YAHhB,SAMGxB,EACC,qCACG,IACD,+BAAKA,EAAYsC,KAAjB,OACA,6CAAgBC,KAAKC,MAAMxC,EAAYyC,KAAKC,MAA5C,YACA,4CAAe1C,EAAYyC,KAAKE,SAAhC,UACA,mDAAsB3C,EAAYyC,KAAKG,SAAvC,QACA,gDACkBC,EAAqB7C,EAAY8C,IAAIC,YAEvD,kDACoBF,EAAqB7C,EAAY8C,IAAIE,cAI3D,2FAuBV,SAASH,EAAqBI,GAC5B,OAAO,IAAIC,KAAiB,IAAZD,GAAkBE,mBAAmB,GAAI,CACvDC,UAAW,UAIf,SAASzB,IACP,OACE,sBACEP,UAAWC,YAAI,CACbC,QAAS,OACTE,WAAY,YAHhB,UAME,qDACA,mFC9HN,IAYe6B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqB5C,MAAK,YAAkD,IAA/C6C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c27bd0c3.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport { css } from '@emotion/css'\n\nfunction App() {\n  const [weatherData, setWeatherData] = useState<WheaterData>()\n  const [plz, setPlz] = useState(6003)\n  const [search, setSearch] = useState(false)\n  const [errorMessage, setErrorMessage] = useState()\n\n  useEffect(() => {\n    axios\n      .get<WheaterData>(\n        `https://api.openweathermap.org/data/2.5/weather?zip=${plz},ch&units=metric&appid=cda2a17e18a88d1ffceb8aeff99c405d`\n      )\n      .then((response) => {\n        setWeatherData(response.data)\n      })\n      .catch((err) => {\n        setErrorMessage(err.message)\n      })\n  }, [search])\n\n  const correctPlzLength = plz.toString().length === 4\n\n  return !errorMessage ? (\n    <div\n      className={css({\n        textAlign: 'center',\n        color: 'white',\n        fontSize: '18px',\n      })}\n    >\n      <Header />\n      <div\n        className={css({\n          padding: '35px',\n          background: '#6C5B7B',\n        })}\n      >\n        <form\n          onSubmit={(e) => {\n            e.preventDefault()\n            setSearch(!search)\n          }}\n        >\n          <p>Bitte g체ltige Schweizer Postleitzahl eingeben:</p>\n          <input\n            type=\"number\"\n            value={plz}\n            onChange={(ev: React.ChangeEvent<HTMLInputElement>): void => {\n              setPlz(parseInt(ev.target.value, 10))\n            }}\n            placeholder=\"Postleitzahl\"\n          />\n          {correctPlzLength ? (\n            <button type=\"submit\">Suchen</button>\n          ) : (\n            <p\n              className={css({\n                fontSize: '14px',\n                color: '#ff4040',\n              })}\n            >\n              Postleitzahl ist zu kurz oder zu lang\n            </p>\n          )}\n        </form>\n      </div>\n      <div\n        className={css({\n          padding: '35px',\n          background: '#C06C84',\n        })}\n      >\n        {weatherData ? (\n          <>\n            {' '}\n            <h2>{weatherData.name} </h2>\n            <p>Temperatur: {Math.round(weatherData.main.temp)} 째C</p>\n            <p>Luftdruck: {weatherData.main.pressure} hPa</p>\n            <p>Luftfeuchtigkeit: {weatherData.main.humidity} %</p>\n            <p>\n              Sonnenaufgang: {timeStampToLocalTime(weatherData.sys.sunrise)}\n            </p>\n            <p>\n              Sonnenuntergang: {timeStampToLocalTime(weatherData.sys.sunset)}\n            </p>\n          </>\n        ) : (\n          <p>Keine Daten, Bitte versuchen Sie es sp채ter erneut</p>\n        )}\n      </div>\n    </div>\n  ) : (\n    <>\n      <div\n        className={css({\n          padding: '60px',\n          textAlign: 'center',\n          background: '#FF0000',\n          color: 'white',\n          fontSize: '18px',\n        })}\n      >\n        <p>Fehler: {errorMessage}</p>\n      </div>\n    </>\n  )\n}\n\nexport default App\n\nfunction timeStampToLocalTime(timeStamp: number) {\n  return new Date(timeStamp * 1000).toLocaleTimeString([], {\n    timeStyle: 'short',\n  })\n}\n\nfunction Header() {\n  return (\n    <div\n      className={css({\n        padding: '25px',\n        background: '#355C7D',\n      })}\n    >\n      <h1>Herzlich Willkommen</h1>\n      <p>Wir pr채sentieren die Wetterdaten der Schweiz</p>\n    </div>\n  )\n}\n\ninterface WheaterData {\n  coord: {\n    lon: number\n    lat: number\n  }\n  main: {\n    temp: number\n    feels_like: number\n    temp_min: number\n    temp_max: number\n    pressure: number\n    humidity: number\n  }\n\n  base: string\n  visibility: number\n  wind: {\n    speed: number\n    deg: number\n    gust: number\n  }\n  clouds: {\n    all: number\n  }\n  dt: number\n  sys: {\n    type: number\n    id: number\n    country: string\n    sunrise: number\n    sunset: number\n  }\n  timezone: number\n  id: number\n  name: string\n  cod: number\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}